@page "/ViewClient"
@page "/{backPage}/ViewClient/{userEmail}"

@using EmprendeUCR.Domain.Core.CoreEntities
@using EmprendeUCR.Application.ProfileContext

@inject IProfileService profileService
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@if (!_isLoading)
{
<nav class=" mt-3 navbar navbar-light bg-light">
    <h3>@myUser.Name @myUser.S_Last_Name</h3>
</nav>

    <div class="flex-container">
        <EditForm Model="@myUser">
            <div class="principal row">
                <!--Image-->
                <div class="marginElements">
                    <div class="flexElementsColumns">
                        @if (myUser.Photo != null)
                        {
                            <img src=@imgRef class="userImage" />
                        }
                        else
                        {
                            <img src="/images/images.png" class="userImage" />
                        }
                        <br>
                        <br>
                        <br>

                    </div>
                </div>

                <div class="col-lg-1"> </div>

                <div class="principalObject col-lg-3 ">

                    <div class="flexDivEnd">

                        <div class="objects">

                            <!--Email-->
                            <div class="marginElements">
                                <label for="staticEmail" class="form-label secondary_title">Correo electrónico:</label>
                                <InputText type="text" @bind-Value="@myUser.Email" class="form-control inputsClass" id="staticEmail" placeholder="@myUser.Email" readonly />
                            </div>

                            <!--Name-->
                            <div class="marginElements">
                                <label for="inputName" class="form-label secondary_title">Nombre:</label>
                                <InputText type="text" @bind-Value="@myUser.Name" class="form-control inputsClass" id="staticEmail" placeholder="@myUser.Name" readonly />
                            </div>

                            <!--First last name-->
                            <div class="marginElements">
                                <label for="inputFLastName" class="form-label secondary_title">Primer apellido</label>
                                <InputText type="text" @bind-Value="@myUser.F_Last_Name" class="form-control inputsClass" id="staticEmail" placeholder="@myUser.F_Last_Name" readonly />
                            </div>

                            <!--Second last name-->
                            <div class="marginElements">
                                <label for="inputSLastName" class="form-label secondary_title">Segundo apellido</label>
                                <InputText type="text" @bind-Value="@myUser.S_Last_Name" class="form-control inputsClass" id="staticEmail" placeholder="@myUser.S_Last_Name" readonly />
                            </div>

                            <!--Phone-->
                            <div class="marginElements">
                                <label for="phone" class="form-label secondary_title">Teléfono</label>
                                <InputText type="text" @bind-Value="@userPhone.Phone_Number" class="form-control inputsClass" id="staticEmail" placeholder="@userPhone.Phone_Number" readonly />
                            </div>

                            <!--Birth date-->
                            <div class="marginElements">
                                <label for="inputBDate" class="control-label secondary_title">Fecha de nacimiento:</label>
                                <InputDate type="date" @bind-Value="@myUser.Birth_Date" class="form-control inputsClass" id="staticEmail" placeholder="@myUser.Birth_Date" readonly />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-1"> </div>

                <div class="principalObject col-lg-3">
                    <div class="flexDivStart">
                        <div class="objects">
                            <!--Address-->
                            <!--Province, Canton and District-->
                            <div class="marginElements flexElementsColumns">
                                <label for="Province" class="secondary_title">Provincia: </label>
                                <InputText type="text" @bind-Value="@myUser.Province_Name" class="form-control inputsClass" id="staticEmail" placeholder="@myUser.Province_Name" readonly />
                            </div>

                            <div class="marginElements flexElementsColumns">
                                <label for="Canton" class="secondary_title">Cantón:</label>
                                <InputText type="text" @bind-Value="@myUser.Canton_Name" class="form-control inputsClass" id="staticEmail" placeholder="@myUser.Canton_Name" readonly />
                            </div>

                            <div class="marginElements flexElementsColumns">

                                <label for="District" class="secondary_title">Distrito: </label>
                                <InputText type="text" @bind-Value="@myUser.District_Name" class="form-control inputsClass" id="staticEmail" placeholder="@myUser.District_Name" readonly />
                            </div>

                            @if (myMember != null)
                            {
                                <!--Exact address-->
                                <div class="marginElements">
                                    <label class="secondary_title">Dirección exacta: </label>
                                    <InputTextArea type="text" @bind-Value="myMember.Direction" class="form-control inputsClass" id="staticEmail" placeholder="@myMember.Direction" row="3" readonly />
                                </div>
                            }

                            <!--Categories and presentation-->
                            <div class="marginElements">
                                <!--Categories for clients and entrepreneurs-->
                                @if (myClient != null || myEntrepreneur != null)
                                {
                                    <!-- Button trigger modal -->
                                    <div class="marginElements flexElementsColumns">
                                        <label for="SelectPreferences" class="control-label secondary_title"> Categorías favoritas: </label>
                                        <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#categoryModal">
                                            Ver categorías
                                        </button>
                                    </div>

                                    <!-- Modal -->
                                    <div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="categoryModalLabel">Categorías favoritas</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <ul class="list-group">
                                                        @foreach (var likes in myLikes)
                                                        {
                                                            <li class="list-group-item">@profileService.GetCategoryTitle(likes.Category_Id)</li>
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }

                                <!--Presentation Only for entrepreneur users-->
                                @if (myEntrepreneur != null)
                                {
                                    <label class="secondary_title">Presentación</label>
                                    <InputTextArea type="text" @bind-Value="myEntrepreneur.Presentation" class="form-control inputsClass" id="staticEmail" placeholder="@myEntrepreneur.Presentation" row="3" readonly />
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-1"> </div>

            </div>
        </EditForm>
    </div>

    <div class="futherButtons">
        <br>
        <button class="btn btn-primary" style="margin-right: 10px" @onclick="goBack"> Volver </button>
    </div>

}
else
{
    <p>Cargando...</p>
}

@functions {
    [Parameter]
    public string userEmail { get; set; }
    [Parameter]
    public string backPage { get; set; }
}

@code {
    private User myUser;
    private Client myClient = null;
    private Members myMember = null;
    private Entrepreneur myEntrepreneur = null;
    private Administrator myAdministrator = null;
    private Phones userPhone = null;

    private string imgRef = "/images/images.png";

    private IList<Likes> myLikes = new List<Likes>();

    private bool _isLoading = true;
    private string homeReference = "/";

    protected override async Task OnInitializedAsync()
    {
        string email = await sessionStorage.GetItemAsync<string>("Email");
        int userType = await sessionStorage.GetItemAsync<int>("Type");
        myUser = await profileService.GetUser(userEmail);
        if (myUser.Photo != null)
        {
            imgRef = "data:image;base64," + @System.Convert.ToBase64String(myUser.Photo);
        }
        userPhone = await profileService.GetPhone(email);
        switch (userType)
        {
            case 1:
                myMember = await profileService.GetMember(email);
                myClient = await profileService.GetClient(email);
                myLikes = await profileService.GetLikes(email);
                break;
            case 2:
                myEntrepreneur = await profileService.GetEntrepreneur(email);
                myMember = await profileService.GetMember(email);
                myLikes = await profileService.GetLikes(myUser.Email);
                homeReference += "Entrepreneur";
                break;
            case 3:
                myAdministrator = await profileService.GetAdministrator(email);
                homeReference += "admin";
                break;
        }

        _isLoading = false;
    }

    private void goBack()
    {
        NavigationManager.NavigateTo(backPage);
    }
}
