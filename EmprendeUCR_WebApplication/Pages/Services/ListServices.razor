@page "/ListServices"
@using EmprendeUCR_WebApplication.Data.Services
@using EmprendeUCR_WebApplication.Data.Services.Categories
@using EmprendeUCR_WebApplication.Data.Entities
@inject EntrepreneurService EntrepreneurService
@inject CategoryService CategoryService
@inject ServiceService ServiceService
@using Syncfusion.Blazor.TreeGrid;
@inject NavigationManager NavManager
@inject Product_ServiceService Product_ServiceService
@inject Service_PhotosService Service_PhotosService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@if (_isLoading)
{
    <p>Cargando...</p>
}
else
{
    <head>
        <link rel="stylesheet" href="~/css/EmprendeUCR-template.css" />
    </head>

    <body>
        <header>
            <div class="icon-m display-2"> Mis Servicios</div>
            <div class="flex-buscar">
                <input @bind-value="inputvalue" @onkeyup="@loadServicesByTerms" class="form-control mr-sm-2 w-25 mb-2" type="search" placeholder="Buscar productos" aria-label="Search" />

            </div>
        </header>

        <section class="w-70  float_right ">

            <div class="layout wrap gap-4 w-90">
                @if (_services?.Count > 0)
                {
                    @foreach (var serv in _services)
                    {
                        var prodServ = _productsServices.First(p => p.Code_ID == serv.Code_ID);
                        var servPhoto = photosDisplay.FirstOrDefault(p => p.Code_ID == serv.Code_ID);

                        <div class="item data border-1 border-blue content-center" @onclick="() => Prueba(serv.Code_ID.ToString())">
                            <div class=" content-center">
                                @if (servPhoto != null)
                                {
                                    <img src="@Service_PhotosService.convertServiceImageDisplay(servPhoto.Photos)" width="200" class=" img-card mt-2" />
                                }
                            </div>
                            <div class="item m-lg-2 ">
                                <div class="item_name">@serv.Service_Name</div>
                                <div class="item_description">@serv.Service_Description</div>
                                <div class="item_price">₡@serv.Price_per_hour</div>
                                <div class="item_category"> @CategoryService.getCategory(serv.Category_ID).Title</div>
                            </div>
                        </div>
                    }



                }
                else { 
                
                     <h2>No hay Servicios </h2>
                 }
            </div>
        </section>

        <aside class="w-25 float_left mb-0">
            <div class=" border-blue  shadow" @onchange="loadCategories">
                <h2 class="text-center fs-2  bg-blue">Categorias</h2>
                @if (_my_categories?.Count > 0)
                {   //jala la llave del papa no se trae los hijos
                    <SfTreeGrid ID="TreeGrid" @ref="TreeGrid" AllowSorting="true" AllowRowDragAndDrop="true" DataSource="@_my_categories" IdMapping="Id" ParentIdMapping="ParentId" AllowSelection="true" TreeColumnIndex="0">
                        <TreeGridEvents TValue="Category" RowDropped="Rowdrop" RowDeselected="SelectionHandler2" RowSelected="SelectionHandler"></TreeGridEvents>
                        <TreeGridSortSettings>
                            <TreeGridSortColumns>
                                <TreeGridSortColumn Field="Title" Direction="Syncfusion.Blazor.Grids.SortDirection.Ascending"></TreeGridSortColumn>
                            </TreeGridSortColumns>
                        </TreeGridSortSettings>
                        <TreeGridColumns>
                            <TreeGridColumn Field="Title" HeaderText="Nombre" Width="100"></TreeGridColumn>
                            <TreeGridColumn Field="Description" HeaderText="Descripción" Width="160"></TreeGridColumn>
                        </TreeGridColumns>
                    </SfTreeGrid>
                }
            </div>

            <NavLink class="nav-link" href="AddService">
                <button class="btn btn-primary" aria-hidden="true">Agregar nuevo servicio</button>
            </NavLink>

        </aside>
    </body>
}

@code {
    private bool _isLoading = true;
    private IList<EmprendeUCR_WebApplication.Data.Entities.Service> _services;
    private IList<EmprendeUCR_WebApplication.Data.Entities.Service> _finalservices;
    private IList<EmprendeUCR_WebApplication.Data.Entities.Product_Service> _productsServices;
    private IList<EmprendeUCR_WebApplication.Data.Entities.Category> _categories;
    private IList<EmprendeUCR_WebApplication.Data.Entities.Category> _my_categories = new List<Category>();
    IList<Service_Photos> photosDisplay;
    SfTreeGrid<Category> TreeGrid { get; set; }
    private Category selectedCategory;
    string selectedEmail;
    string inputvalue;
    bool firstClick = true;

    public async Task loadAllServices(string email)
    {
        _my_categories.Clear();
        selectedEmail = email;
        await loadServices(email);
        await loadProductsServices(email);
        await loadCategories();
    }

    public async Task loadCategories()
    {
        _my_categories.Clear();
        foreach (var serv in _services)
        {
            Category cat = CategoryService.getCategory(serv.Category_ID);

            Category iterator = CategoryService.getCategory(serv.Category_ID);

            while (iterator.ParentId != null)
            {

                Category parentcat = CategoryService.getCategory((int)iterator.ParentId);

                if (!_my_categories.Contains(parentcat))
                {
                    _my_categories.Add(parentcat);
                }

                iterator = parentcat;
            }

            if (!_my_categories.Contains(cat))
            {
                _my_categories.Add(cat);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        selectedEmail = await sessionStorage.GetItemAsync<string>("Email");
        _categories = await CategoryService.GetAsync();
        photosDisplay = Service_PhotosService.loadAllPhotos();
        await loadAllServices(selectedEmail);
        _isLoading = false;
    }
    bool hideError = true;

    public async Task loadServices(string email)
    {
        _services = await ServiceService.GetServicesEntrepreneurAsync(email);
        _finalservices = _services;
    }

    public void loadServicesByTerms(KeyboardEventArgs key)
    {

        if (inputvalue != null)
        {

            _services = _finalservices;
            _services = _services.Filter(s => s.Service_Name.Contains(inputvalue)).ToList();
        }
    }

    public async Task loadProductsServices(string email)
    {
        _productsServices = await Product_ServiceService.GetProductsServicesEntrepreneurAsync(email);
    }

    public async Task loadServicesByCategory(string email, int category_id)
    {
        _services = await ServiceService.GetServicesByCategoryAsync(email, category_id);
        _productsServices = await Product_ServiceService.GetProductsByCategoryAsync(email, category_id);
    }

    // metodos para prueba de categories

    //RowDrop
    private void Rowdrop(Syncfusion.Blazor.Grids.RowDragEventArgs<Category> args)
    {
        CategoryService.Rowdrop(args, this.TreeGrid);
    }

    //SelectionHandler

    public async Task SelectionHandler(Syncfusion.Blazor.Grids.RowSelectEventArgs<Category> args)
    {
        var SelectedCategories = await this.TreeGrid.GetSelectedRecords();
        if (SelectedCategories.Count() > 0)
        {
            selectedCategory = SelectedCategories.First();
            await loadServicesByCategory(selectedEmail, selectedCategory.Id);
        }
        else
        {
            selectedCategory = null;
        }
    }

    public async Task SelectionHandler2(Syncfusion.Blazor.Grids.RowDeselectEventArgs<Category> args)
    {
        if (args.Data.Id == selectedCategory.Id && !firstClick)
        {
            await loadServices(selectedEmail);
            await loadProductsServices(selectedEmail);
            await loadCategories();
        }
        firstClick = false;
    }

    //puede rescibir parametro
    void Prueba(string CodeId)
    {
        NavManager.NavigateTo("/ServiceView" + "/" + CodeId);
    }

    //metodos buscar productos
    public void EnterKey(KeyboardEventArgs e)
    {
        int emptyCharacters = 0;

        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && !string.IsNullOrEmpty(inputValue))
        {
            for (int i = 0; i < inputValue.Length; i++)
            {
                if (inputValue.ElementAt(i).Equals(' '))
                {
                    emptyCharacters++;
                }
            }

            if (emptyCharacters != inputValue.Length)
            {
                //NavigationManager.NavigateTo($"/ProductsSearch/{inputValue}", true);
            }
        }
    }

    private string inputValue;
    private void buscar()
    {
        int emptyCharacters = 0;

        if (!string.IsNullOrEmpty(inputValue))
        {
            for (int i = 0; i < inputValue.Length; i++)
            {
                if (inputValue.ElementAt(i).Equals(' '))
                {
                    emptyCharacters++;
                }
            }

            if (emptyCharacters != inputValue.Length)
            {
                // NavigationManager.NavigateTo($"/ServicesSearch/{inputValue}", true);
            }
        }

    }

}



