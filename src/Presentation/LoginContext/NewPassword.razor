@page "/NewPassword"
@using Microsoft.AspNetCore.WebUtilities
@using EmprendeUCR.Domain.Core.CoreEntities
@using EmprendeUCR.Domain.RegisterContext.Entities
@using EmprendeUCR.Application.LoginContext
@using Blazored.FluentValidation

@inject ILoginService loginService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
<!--HTML-->
<div class="flexDiv">
    <div class="mainClass">
        <h3>Crea una nueva contraseña</h3>
        @if (cargando)
        {
            <h3>Cargando...</h3>
        }
        else
        {
            <EditForm Model="@newRegister" OnValidSubmit="@createPassword">
                <FluentValidationValidator />

                <!--Email-->
                <div class="marginElements">
                    <label for="staticEmail" class="form-label secondary_title">Correo electrónico:</label>
                    <InputText type="text" @bind-Value="@newRegister.Email" class="form-control inputsClass" id="staticEmail" placeholder="@newRegister.Email" readonly />
                    <ValidationMessage For="@(()=> newRegister.Email)"> </ValidationMessage>
                </div>

                <!--New Password-->
                <div class="marginElements">
                    <label for="inputPassword5" class="form-label secondary_title">Nueva contraseña:</label>
                    <InputText type="@pwdType" class="form-control inputsClass" aria-describedby="passwordHelpBlock" id="inputPassword5" @bind-Value="newRegister.Password" />
                    <ValidationMessage For="@(()=> newRegister.Password)"> </ValidationMessage>
                    <Input type="checkbox" @onclick="@showPassword"> Mostrar Contraseña
                </div>

                <!--Confirm New Password-->
                <div class="marginElements">
                    <label for="inputPassword5" class="form-label secondary_title">Confirmar nueva contraseña:</label>
                    <InputText type="@pwdType" class="form-control inputsClass" aria-describedby="passwordHelpBlock" id="inputPassword5" @bind-Value="newRegister.ConfirmPassword" />
                    <ValidationMessage For="@(()=> newRegister.ConfirmPassword)"> </ValidationMessage>
                </div>

                <!--Submit button-->
                <center>
                    <button type="submit" class="btn btn-primary marginElements">Cambiar mi contraseña</button>

                    <p style="color:#FF0000">
                        @errorMessage
                    </p>
                </center>
            </EditForm>
        }
    </div>
</div>



@code {
    /*New Password atributes*/
    private string text = "Mostrar Contraseña";
    private string pwdType = "password";
    private Register newRegister = new Register();
    private Credentials newCredentials = null;
    private bool confirmar = true;
    private bool cargando = true;
    private string errorMessage = "";

    /*Verify email atributes*/
    private bool _verificandoCorreo = true;
    string hash_correo = "";
    private EmailConfirmation _email;
    bool error = false;

    /*
    Brief: Get the email confirmation of the user.
    Parameters:
    Returns:
    */
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var parameter))
        {
            hash_correo = parameter;
        }

        if (!string.IsNullOrEmpty(hash_correo))
        {
            _email = loginService.getEmailConfirmationByHash(hash_correo);

            if (_email == null)
            {
                NavigationManager.NavigateTo("/messagePage?type=10");
            }
            else
            {
                newCredentials = loginService.getUserCredentials(_email.Email);
                newRegister.Email = _email.Email;
                cargando = false;
            }
        }
    }

    /*
    Brief: Encryp and save new user password.
    Parameters:
    Returns:
    */
    public async void createPassword()
    {
        if (newRegister.ConfirmPassword == newRegister.Password)
        {
            string encrypPassword = loginService.encryptPassword(newRegister.Password);

            if (encrypPassword != newCredentials.Password)
            {
                newCredentials.Password = encrypPassword;
                loginService.UpdateCredentials(newCredentials);
                EmailConfirmation newEmailConfirmation = await loginService.GetEmailConfirmationEmail(newCredentials.User_Email);
                string newHashEmail = loginService.hashEmail(newEmailConfirmation.Email);
                newEmailConfirmation.Hash_Code = newHashEmail;
                loginService.updateEmailConfirmations(newEmailConfirmation);
                NavigationManager.NavigateTo("/messagePage?type=2");
            }
            else
            {
                errorMessage = "Es necesario ingresar una contraseña nueva.";
            }
        }
        else
        {
            errorMessage = "Las contraseñas no coinciden, por favor verifiquelas.";
        }
        StateHasChanged();
    }

    /*
    Brief: Show the new password.
    Parameters:
    Returns:
    */
    public void showPassword()
    {
        if (pwdType == "password")
        {
            pwdType = "text";
            text = "Esconder Contraseña";
        }
        else
        {
            pwdType = "password";
            text = "Mostrar Contraseña";
        }
    }

}